import golosinas.*
import mariano.*

describe "tests de mariano" {

	fixture {
		chocolatin.pesoInicial(100)
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)
	}

	test "test comprar" {
		assert.equals(3, mariano.golosinas().size())
		assert.that(mariano.golosinas().contains(chocolatin))
		assert.that(mariano.golosinas().contains(caramelo))
		assert.that(mariano.golosinas().contains(bombon))
		assert.notThat(mariano.golosinas().contains(chupetin))
	}

	test "probar golosinas" {
		/* habilitar las lineas anuladas cuando se complete la definicion 
		 * de las golosinas
		 */
		assert.equals(100, chocolatin.peso())
		assert.equals(5, caramelo.peso())
		assert.equals(15, bombon.peso())
		mariano.probarGolosinas()
		assert.equals(98, chocolatin.peso())
		assert.equals(4, caramelo.peso())
		assert.equals(11, bombon.peso())
	}

	test "compro un alfajor y tiene que estar en la bolsa" {
		mariano.comprar(alfajor)
		assert.that(mariano.golosinas().contains(alfajor))
	}

	test "tiro el caramelo y ya no tiene que estar la bolsa" {
		mariano.desechar(caramelo)
		assert.notThat(mariano.golosinas().contains(caramelo))
	}

	test "hay libre de Gluten?" {
		assert.that(mariano.hayGolosinaSinTACC())
	}

	test "al tener un precio mayor a 10 pesos los precios no son cuidados" {
		assert.notThat(mariano.preciosCuidados())
	// lo cambie p1or el negado por que siempre me daba amarillo
	}

	test "al tener el caramelo en la bolsa, tengo una golosina sabor frutilla" {
		mariano.desechar(bombon)
		assert.equals(caramelo, mariano.golosinaDeSabor(frutilla))
	}

	test "si ninguna golosina es de vainilla explota " {
		assert.throwsException({ mariano.golosinaDeSabor(vainilla)})
	}

	test "hay alguna golosina de sabor chocolate tiene que retornar chocolatin" {
		var sabor = chocolate
		assert.equals(chocolatin, mariano.golosinaDeSabor(sabor))
	}

	test "golosinas de sabor frutilla tienen que ser caramelo y bombon" {
		var sabor = frutilla
		// assert.notThat(mariano.golosinasDeSabor(sabor).isEmpty())
		assert.that(mariano.golosinasDeSabor(sabor) == #{ caramelo, bombon })
	}

	test "golosinas de sabor chocolate tiene que ser chocolatin" {
		var sabor = chocolate
		// assert.notThat(mariano.golosinasDeSabor(sabor).isEmpty())
		assert.that(mariano.golosinasDeSabor(sabor) == #{ chocolatin })
	}

	test "conjunto de sabores tiene que ser chocolate y frutilla" {
		// assert.notThat(mariano.sabores().isEmpty)
		assert.that(mariano.sabores() == #{ chocolate, frutilla })
	}

	test "golosina mas cara debe ser chocolatin" {
		assert.that(mariano.golosinaMasCara() == chocolatin)
	}

	test "suma de todos los pesos tiene que ser al inicio 120(100+5+15)" {
		assert.equals(120, mariano.pesoGolosinas())
	}

	test "suma de todos los pesos tiene que ser 113(98+4+11) despues de 1 probada a la bolsa" {
		mariano.probarGolosinas()
		assert.equals(113, mariano.pesoGolosinas())
	}

	/* estos test son cuando almaceno como los conjuntos de golosinas y gustos dentro de mariano
	 * 	test "agrego gustos deseados frutilla y naranja y verifico" {
	 * 		var gustos = #{ frutilla, naranja }
	 * 		mariano.agregarGustosDeseados(gustos)
	 * 		assert.equals(gustos, mariano.gustosDeseados())
	 * 	}

	 * 	test "agrego golosinas deseadas chupetin y alfajor y verifico" {
	 * 		var candy = #{ chupetin, alfajor }
	 * 		mariano.agregarGolosinasDeseadas(candy)
	 * 		assert.equals(candy, mariano.golosinasDeseadas())
	 } */
	test "tengo actualmente 3 golosinas y desecho todo" {
		mariano.desecharBolsa()
		assert.that(mariano.golosinas().isEmpty())
	}

	test "si golosinas deseadas #{alfajor, bombon, chupetin, oblea}, y tengo en la bolsa #{chocholatin,caramelo,bombon,alfajor} las que faltan son #{chupetin, oblea} " {
		var deseadas = #{ alfajor, bombon, chupetin, oblea }
		mariano.comprar(alfajor)
		assert.equals(#{ chupetin, oblea }, mariano.golosinasFaltantes(deseadas))
	}

	test "si golosinas deseadas #{alfajor, bombon}, y tengo en la bolsa #{chocholatin,caramelo,bombon,alfajor} no falta ninguna " {
		var deseadas = #{ alfajor, bombon }
		mariano.comprar(alfajor)
		assert.that(mariano.golosinasFaltantes(deseadas).isEmpty())
	}

}

